name: Build and Release Plugin

on:
  push:
    tags:
      - '*' # This workflow runs on any tag push

permissions:
  contents: write # Allows creating releases and pushing commits

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository code at the specific tag
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to switch branches later

      # 2. Check for package-lock.json to determine caching strategy
      - name: Check for package-lock.json
        id: check_lockfile
        run: |
          if [ -f package-lock.json ]; then
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lockfile_exists=false" >> $GITHUB_OUTPUT
          fi

      # 3. Set up Node.js with conditional caching
      - name: Set up Node.js with caching
        if: steps.check_lockfile.outputs.lockfile_exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Set up Node.js without caching
        if: steps.check_lockfile.outputs.lockfile_exists == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 4. Install dependencies (and potentially create/update package-lock.json)
      - name: Install dependencies with npm ci (if lockfile exists)
        if: steps.check_lockfile.outputs.lockfile_exists == 'true'
        id: npm_ci
        continue-on-error: true
        run: npm ci

      - name: Install dependencies with npm install (if lockfile is missing or ci failed)
        if: steps.check_lockfile.outputs.lockfile_exists == 'false' || steps.npm_ci.outcome == 'failure'
        run: |
          if [ -f package-lock.json ]; then
            echo "Corrupted package-lock.json detected. Removing and regenerating."
            rm package-lock.json
          fi
          npm install

      # 5. Check if package-lock.json was created or modified
      # We do this check now, but act on it later.
      - name: Check for changes in package-lock.json
        id: lockfile_status
        run: |
          if [[ -n $(git status --porcelain package-lock.json) ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # 6. Build the plugin for production (using the tagged code)
      - name: Build plugin
        id: build
        run: npm run build

      # 7. Prepare release assets
      - name: Prepare release assets
        run: |
          mkdir release-assets
          cp build/main.js release-assets/
          cp manifest.json release-assets/
          if [ -f build/styles.css ]; then
            cp build/styles.css release-assets/
          fi

      # 8. Get version and tag info for the release
      - name: Get release info
        id: get_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          VERSION=$(jq -r .version manifest.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      # 9. Verify that the tag matches the manifest version
      - name: Verify tag and manifest version match
        run: |
          if [ "v${{ env.version }}" != "${{ env.tag_name }}" ] && [ "${{ env.version }}" != "${{ env.tag_name }}" ]; then
            echo "Error: Tag name '${{ env.tag_name }}' does not match manifest version '${{ env.version }}'."
            exit 1
          fi

      # 10. Overwrite existing release if one with the same tag exists
      - name: Delete existing release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.tag_name
              });
              if (release) {
                console.log(`Found existing release ${release.id} for tag ${process.env.tag_name}. Deleting it.`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release found for tag ${process.env.tag_name}.`);
              } else {
                throw error;
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.tag_name }}

      # 11. Create the new GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false
          files: |
            release-assets/main.js
            release-assets/manifest.json
            release-assets/styles.css

      # 12. Commit and push package-lock.json to the main branch (if changed)
      # This is the corrected step, now placed at the end of the job.
      - name: Commit and push package-lock.json
        if: steps.lockfile_status.outputs.changed == 'true'
        run: |
          # The new package-lock.json is an untracked file in our detached HEAD state.
          # We switch to the main branch, which brings the untracked file along.
          git checkout "${{ github.event.repository.default_branch }}"
          
          # Now configure the user and commit to the main branch
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package-lock.json
          # Add [skip ci] to the commit message to prevent a workflow loop
          git commit -m "chore: update package-lock.json [skip ci]"
          git push
